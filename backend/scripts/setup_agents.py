#!/usr/bin/env python3
"""
Script pour initialiser les agents par d√©faut dans Supabase.
Ce script v√©rifie si la table 'agents' existe, la cr√©e si n√©cessaire, 
puis ins√®re les agents par d√©faut.
"""

import asyncio
import sys
from pathlib import Path
from dotenv import load_dotenv

# Ajouter le r√©pertoire parent au path pour pouvoir importer les modules
parent_dir = str(Path(__file__).parent.parent)
sys.path.append(parent_dir)

from services.supabase_service import supabase_service


# D√©finition des agents par d√©faut
DEFAULT_AGENTS = [
    {
        "id": "webinar-expert",
        "name": "Expert Webinar",
        "description": "Un expert en cr√©ation et animation de webinaires professionnels",
        "avatar": "üë®‚Äçüíº",
        "prompt": "Tu es un expert en cr√©ation et animation de webinaires professionnels. Tu aides √† planifier, structurer et animer des webinaires efficaces. Tu donnes des conseils sur la pr√©paration, la technique, l'engagement de l'audience et le suivi post-webinaire."
    },
    {
        "id": "fitness-coach",
        "name": "Coach Fitness",
        "description": "Un coach de fitness personnel qui aide √† atteindre vos objectifs de sant√© et de forme",
        "avatar": "üí™",
        "prompt": "Tu es un coach de fitness personnel qui aide √† cr√©er des programmes d'entra√Ænement personnalis√©s. Tu donnes des conseils sur les exercices, la nutrition, la r√©cup√©ration et la motivation. Tu adaptes tes recommandations en fonction des objectifs, du niveau et des contraintes de chacun."
    },
    {
        "id": "career-mentor",
        "name": "Mentor de Carri√®re",
        "description": "Un conseiller en d√©veloppement de carri√®re qui aide √† progresser professionnellement",
        "avatar": "üöÄ",
        "prompt": "Tu es un mentor de carri√®re exp√©riment√© qui aide √† d√©finir et atteindre des objectifs professionnels. Tu offres des conseils sur le d√©veloppement de comp√©tences, la recherche d'emploi, les entretiens, la n√©gociation salariale et l'√©volution de carri√®re. Tu aides √† identifier les forces, les faiblesses et les opportunit√©s."
    }
]


async def create_agent_table():
    """V√©rifie si la table 'agents' existe et la cr√©e si n√©cessaire"""
    try:
        # V√©rifier si la table existe
        table_exists = await supabase_service.check_table_exists('agents')
        
        if not table_exists:
            print("La table 'agents' n'existe pas. Cr√©ation de la table...")
            # Pour cr√©er la table, nous allons simplement ins√©rer un agent test puis le supprimer
            # Cela forcera Supabase √† cr√©er la table avec le bon sch√©ma
            test_agent = {
                "id": "test-agent",
                "name": "Agent Test",
                "description": "Agent temporaire pour la cr√©ation de la table",
                "avatar": "üß™",
                "prompt": "Ceci est un agent test."
            }
            
            # Ins√©rer l'agent test
            await supabase_service.create_agent(test_agent)
            print("Table 'agents' cr√©√©e avec succ√®s.")
            
            # Supprimer l'agent test - cette partie est optionnelle
            # Nous pourrions impl√©menter une m√©thode delete_agent dans le service Supabase
        else:
            print("La table 'agents' existe d√©j√†.")
        
        return True
    except Exception as e:
        print(f"Erreur lors de la cr√©ation de la table 'agents': {str(e)}")
        return False



async def insert_agents():
    """Ins√®re les agents par d√©faut dans la base de donn√©es"""
    try:
        print("Insertion des agents par d√©faut...")
        for agent in DEFAULT_AGENTS:
            # V√©rifier si l'agent existe d√©j√†
            existing_agent = await supabase_service.get_agent_by_id(agent["id"])
            
            if existing_agent:
                print(f"L'agent '{agent['name']}' existe d√©j√†.")
            else:
                # Ins√©rer l'agent
                result = await supabase_service.create_agent(agent)
                if result:
                    print(f"Agent '{agent['name']}' ins√©r√© avec succ√®s.")
                else:
                    print(f"√âchec de l'insertion de l'agent '{agent['name']}'.")
        
        return True
    except Exception as e:
        print(f"Erreur lors de l'insertion des agents: {str(e)}")
        return False



async def main():
    """Fonction principale qui initialise les agents"""
    print("Initialisation des agents...")
    
    # Charger les variables d'environnement
    load_dotenv()
    
    # Cr√©er la table si n√©cessaire
    table_created = await create_agent_table()
    if not table_created:
        print("Impossible de cr√©er la table 'agents'. Arr√™t du script.")
        return False
    
    # Ins√©rer les agents par d√©faut
    agents_inserted = await insert_agents()
    if not agents_inserted:
        print("Erreur lors de l'insertion des agents par d√©faut.")
        return False
    
    print("Initialisation des agents termin√©e avec succ√®s.")
    return True


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)