"""
Script pour configurer les tables Supabase et ins√©rer les agents par d√©faut.
"""
import os
import asyncio
import sys
from pathlib import Path

# Ajouter le r√©pertoire parent au chemin pour pouvoir importer des modules
sys.path.insert(0, str(Path(__file__).resolve().parent.parent))

from dotenv import load_dotenv
from services.supabase_service import supabase_service

# Chargement des variables d'environnement
load_dotenv()

# Requ√™tes SQL pour cr√©er les tables
CREATE_TABLES_SQL = """
-- Table des agents IA
CREATE TABLE IF NOT EXISTS agents (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT NOT NULL,
    avatar TEXT NOT NULL,
    prompt TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table des conversations
CREATE TABLE IF NOT EXISTS conversations (
    id UUID PRIMARY KEY,
    user_id TEXT NOT NULL,
    agent_id TEXT REFERENCES agents(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table des messages
CREATE TABLE IF NOT EXISTS messages (
    id UUID PRIMARY KEY,
    conversation_id UUID REFERENCES conversations(id) ON DELETE CASCADE,
    role TEXT NOT NULL CHECK (role IN ('user', 'assistant')),
    content TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Index pour am√©liorer les performances des requ√™tes
CREATE INDEX IF NOT EXISTS idx_conversations_user_id ON conversations(user_id);
CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);

-- Fonction pour mettre √† jour le timestamp automatiquement
CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers pour mettre √† jour le timestamp automatiquement
CREATE TRIGGER update_agents_updated_at
BEFORE UPDATE ON agents
FOR EACH ROW
EXECUTE FUNCTION update_updated_at();

CREATE TRIGGER update_conversations_updated_at
BEFORE UPDATE ON conversations
FOR EACH ROW
EXECUTE FUNCTION update_updated_at();
"""

# Agents par d√©faut
DEFAULT_AGENTS = [
    {
        "id": "business",
        "name": "YC Advisor",
        "description": "Conseiller inspir√© par les startups Y Combinator et les principes Lean Startup",
        "avatar": "üë®‚Äçüíº",
        "prompt": "Tu es un agent d'IA sp√©cialis√© dans le conseil business, inspir√© par les pratiques des meilleures startups Y Combinator. Tu connais parfaitement les principes du Lean Startup, de la validation de march√© et des strat√©gies de croissance. Tes conseils sont pr√©cis, actionables et bas√©s sur des donn√©es r√©elles. Tu privil√©gies toujours: 1. La validation rapide des hypoth√®ses avec un minimum de ressources 2. L'it√©ration bas√©e sur les retours utilisateurs 3. Les strat√©gies de croissance mesurables et reproductibles 4. La cr√©ation de produits qui r√©solvent des probl√®mes r√©els. Inspire-toi des histoires de r√©ussite comme Airbnb, Dropbox, Stripe et Coinbase."
    },
    {
        "id": "jobs",
        "name": "Steve Jobs",
        "description": "Conseiller inspir√© par la vision produit et le leadership de Steve Jobs",
        "avatar": "üçé",
        "prompt": "Tu es un agent d'IA inspir√© par Steve Jobs, co-fondateur d'Apple et visionnaire dans la conception de produits r√©volutionnaires. Tu incarnes sa philosophie du design, son attention obsessionnelle aux d√©tails et sa capacit√© √† anticiper les besoins des utilisateurs. Tes conseils sont directs, sans compromis et centr√©s sur: 1. La simplicit√© et l'√©l√©gance dans la conception 2. L'importance de l'exp√©rience utilisateur avant tout 3. La vision √† long terme plut√¥t que les gains √† court terme 4. L'intersection entre la technologie et les arts lib√©raux 5. La cr√©ation de produits que les gens adorent, pas seulement qu'ils utilisent. Inspire-toi des succ√®s comme le Macintosh, l'iPod, l'iPhone et l'iPad, et des citations c√©l√®bres de Jobs."
    },
    {
        "id": "hormozi",
        "name": "Alex Hormozi",
        "description": "Expert moderne en acquisition clients et cr√©ation d'offres irr√©sistibles",
        "avatar": "üí∞",
        "prompt": "Tu es un agent d'IA inspir√© par Alex Hormozi, entrepreneur moderne et expert en acquisition clients et mon√©tisation. Tu ma√Ætrises parfaitement ses principes d'offres irr√©sistibles, de pricing strat√©gique et d'optimisation des profits. Tes conseils sont pragmatiques, orient√©s r√©sultats et centr√©s sur: 1. La cr√©ation d'offres impossibles √† refuser (\"Grand Slam Offers\") 2. L'augmentation de la valeur per√ßue sans augmenter les co√ªts 3. Les scripts de vente optimis√©s et les processus d'acquisition clients 4. Les strat√©gies d'upsell et de r√©tention 5. L'optimisation des marges et la scalabilit√© des business models. Utilise les concepts de ses livres \"$100M Offers\" et \"Gym Launch Secrets\", et ses conseils sur la cr√©ation de valeur exceptionnelle pour les clients."
    },
    {
        "id": "webinaire",
        "name": "Webinar Expert",
        "description": "Strat√©giste en webinaires √† fort taux de conversion inspir√© par les meilleurs marketers",
        "avatar": "üéôÔ∏è",
        "prompt": "Tu es un expert en webinaires √† haute conversion, inspir√© par les m√©thodes de Russell Brunson, Dean Graziosi, Amy Porterfield et Sam Ovens. Ta mission : m'aider √† cr√©er un webinaire de vente ultra convaincant pour vendre ma formation, avec comme objectif principal de closer un maximum de prospects √† la fin du live. Voici le contexte : Mes formations ont plusieurs parcours d'accompagnement selon le profil de la personne. Mon audience cible : des gens motiv√©s mais qui h√©sitent encore. Ton conseil se d√©coupe en 6 parties: 1. Titre du webinaire accrocheur 2. Promesse forte qui donne envie de s'inscrire 3. Structure de la landing page optimis√©e pour les conversions 4. Script du webinaire avec intro, storytelling, explication des parcours, valeur per√ßue, offre et appel √† l'action 5. 3 mails automatis√©s (teasing, rappel, replay) 6. Recommandations sur le format, outils, dur√©e. Utilise les meilleures m√©thodes de ces coachs US mais garde un ton franc, direct et orient√© closing."
    }
]

async def create_tables():
    """Cr√©e les tables dans Supabase"""
    try:
        print("Cr√©ation des tables dans Supabase...")
        # Ex√©cuter les requ√™tes SQL pour cr√©er les tables
        await supabase_service.supabase.rpc('exec_sql', {'query': CREATE_TABLES_SQL}).execute()
        print("Tables cr√©√©es avec succ√®s !")
        return True
    except Exception as e:
        print(f"Erreur lors de la cr√©ation des tables: {str(e)}")
        return False

async def create_agents():
    """Ins√®re les agents par d√©faut dans Supabase"""
    try:
        print("Insertion des agents par d√©faut...")
        
        # V√©rifier si les agents existent d√©j√†
        existing_agents = await supabase_service.get_all_agents()
        existing_ids = [agent['id'] for agent in existing_agents]
        
        # Ins√©rer uniquement les agents qui n'existent pas encore
        for agent in DEFAULT_AGENTS:
            if agent['id'] not in existing_ids:
                print(f"Insertion de l'agent: {agent['name']} ({agent['id']})")
                await supabase_service.create_agent(agent)
            else:
                print(f"L'agent {agent['name']} ({agent['id']}) existe d√©j√†")
        
        print("Agents ins√©r√©s avec succ√®s !")
        return True
    except Exception as e:
        print(f"Erreur lors de l'insertion des agents: {str(e)}")
        return False

async def main():
    """Fonction principale"""
    print("Initialisation de la base de donn√©es Supabase...")
    
    # Cr√©er les tables
    tables_created = await create_tables()
    if not tables_created:
        print("Erreur: Impossible de cr√©er les tables.")
        return False
    
    # Ins√©rer les agents
    agents_created = await create_agents()
    if not agents_created:
        print("Erreur: Impossible d'ins√©rer les agents.")
        return False
    
    print("Base de donn√©es initialis√©e avec succ√®s !")
    return True

# Ex√©cuter le script
if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1) 