#!/usr/bin/env python3
"""
Script pour initialiser les tables et les agents dans Supabase
en utilisant les m√©thodes du SupabaseService directement.
"""
import os
import asyncio
import sys
from pathlib import Path

# Ajouter le r√©pertoire parent au chemin pour pouvoir importer des modules
parent_dir = str(Path(__file__).resolve().parent.parent)
sys.path.insert(0, parent_dir)

from dotenv import load_dotenv
from services.supabase_service import supabase_service

# Chargement des variables d'environnement
load_dotenv()

# Agents par d√©faut
DEFAULT_AGENTS = [
    {
        "id": "business",
        "name": "YC Advisor",
        "description": "Conseiller inspir√© par les startups Y Combinator et les principes Lean Startup",
        "avatar": "üë®‚Äçüíº",
        "prompt": "Tu es un agent d'IA sp√©cialis√© dans le conseil business, inspir√© par les pratiques des meilleures startups Y Combinator. Tu connais parfaitement les principes du Lean Startup, de la validation de march√© et des strat√©gies de croissance. Tes conseils sont pr√©cis, actionables et bas√©s sur des donn√©es r√©elles. Tu privil√©gies toujours: 1. La validation rapide des hypoth√®ses avec un minimum de ressources 2. L'it√©ration bas√©e sur les retours utilisateurs 3. Les strat√©gies de croissance mesurables et reproductibles 4. La cr√©ation de produits qui r√©solvent des probl√®mes r√©els. Inspire-toi des histoires de r√©ussite comme Airbnb, Dropbox, Stripe et Coinbase."
    },
    {
        "id": "jobs",
        "name": "Steve Jobs",
        "description": "Conseiller inspir√© par la vision produit et le leadership de Steve Jobs",
        "avatar": "üçé",
        "prompt": "Tu es un agent d'IA inspir√© par Steve Jobs, co-fondateur d'Apple et visionnaire dans la conception de produits r√©volutionnaires. Tu incarnes sa philosophie du design, son attention obsessionnelle aux d√©tails et sa capacit√© √† anticiper les besoins des utilisateurs. Tes conseils sont directs, sans compromis et centr√©s sur: 1. La simplicit√© et l'√©l√©gance dans la conception 2. L'importance de l'exp√©rience utilisateur avant tout 3. La vision √† long terme plut√¥t que les gains √† court terme 4. L'intersection entre la technologie et les arts lib√©raux 5. La cr√©ation de produits que les gens adorent, pas seulement qu'ils utilisent. Inspire-toi des succ√®s comme le Macintosh, l'iPod, l'iPhone et l'iPad, et des citations c√©l√®bres de Jobs."
    },
    {
        "id": "hormozi",
        "name": "Alex Hormozi",
        "description": "Expert moderne en acquisition clients et cr√©ation d'offres irr√©sistibles",
        "avatar": "üí∞",
        "prompt": "Tu es un agent d'IA inspir√© par Alex Hormozi, entrepreneur moderne et expert en acquisition clients et mon√©tisation. Tu ma√Ætrises parfaitement ses principes d'offres irr√©sistibles, de pricing strat√©gique et d'optimisation des profits. Tes conseils sont pragmatiques, orient√©s r√©sultats et centr√©s sur: 1. La cr√©ation d'offres impossibles √† refuser (\"Grand Slam Offers\") 2. L'augmentation de la valeur per√ßue sans augmenter les co√ªts 3. Les scripts de vente optimis√©s et les processus d'acquisition clients 4. Les strat√©gies d'upsell et de r√©tention 5. L'optimisation des marges et la scalabilit√© des business models. Utilise les concepts de ses livres \"$100M Offers\" et \"Gym Launch Secrets\", et ses conseils sur la cr√©ation de valeur exceptionnelle pour les clients."
    },
    {
        "id": "webinaire",
        "name": "Webinar Expert",
        "description": "Strat√©giste en webinaires √† fort taux de conversion inspir√© par les meilleurs marketers",
        "avatar": "üéôÔ∏è",
        "prompt": "Tu es un expert en webinaires √† haute conversion, inspir√© par les m√©thodes de Russell Brunson, Dean Graziosi, Amy Porterfield et Sam Ovens. Ta mission : m'aider √† cr√©er un webinaire de vente ultra convaincant pour vendre ma formation, avec comme objectif principal de closer un maximum de prospects √† la fin du live. Voici le contexte : Mes formations ont plusieurs parcours d'accompagnement selon le profil de la personne. Mon audience cible : des gens motiv√©s mais qui h√©sitent encore. Ton conseil se d√©coupe en 6 parties: 1. Titre du webinaire accrocheur 2. Promesse forte qui donne envie de s'inscrire 3. Structure de la landing page optimis√©e pour les conversions 4. Script du webinaire avec intro, storytelling, explication des parcours, valeur per√ßue, offre et appel √† l'action 5. 3 mails automatis√©s (teasing, rappel, replay) 6. Recommandations sur le format, outils, dur√©e. Utilise les meilleures m√©thodes de ces coachs US mais garde un ton franc, direct et orient√© closing."
    }
]

async def create_agent_table():
    """V√©rifie si la table 'agents' existe ou tente de la cr√©er"""
    try:
        print("V√©rification de la table 'agents'...")
        # On v√©rifie d'abord si la table existe
        table_exists = await supabase_service.check_table_exists('agents')
        
        if table_exists:
            print("‚úÖ La table 'agents' existe d√©j√†.")
            return True
        
        print("La table 'agents' n'existe pas, tentative de cr√©ation...")
        
        # Si elle n'existe pas, on va essayer d'ins√©rer un agent pour voir si cela cr√©e la table
        test_agent = {
            "id": "test-agent",
            "name": "Agent Test",
            "description": "Test de cr√©ation de table",
            "avatar": "üß™",
            "prompt": "Ceci est un agent de test."
        }
        
        result = await supabase_service.create_agent(test_agent)
        if result:
            print("‚úÖ Table 'agents' cr√©√©e avec succ√®s.")
            return True
        else:
            print("‚ùå √âchec de la cr√©ation de la table 'agents'.")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification/cr√©ation de la table 'agents': {str(e)}")
        return False

async def create_conversation_table():
    """V√©rifie si la table 'conversations' existe ou tente de la cr√©er"""
    try:
        print("V√©rification de la table 'conversations'...")
        table_exists = await supabase_service.check_table_exists('conversations')
        
        if table_exists:
            print("‚úÖ La table 'conversations' existe d√©j√†.")
            return True
            
        print("‚ö†Ô∏è La table 'conversations' n'existe pas.")
        print("IMPORTANT: Vous devez cr√©er manuellement cette table dans l'interface SQL de Supabase.")
        print("Utilisez le script SQL dans backend/scripts/create_tables.sql")
        return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de la table 'conversations': {str(e)}")
        return False

async def create_message_table():
    """V√©rifie si la table 'messages' existe ou tente de la cr√©er"""
    try:
        print("V√©rification de la table 'messages'...")
        table_exists = await supabase_service.check_table_exists('messages')
        
        if table_exists:
            print("‚úÖ La table 'messages' existe d√©j√†.")
            return True
            
        print("‚ö†Ô∏è La table 'messages' n'existe pas.")
        print("IMPORTANT: Vous devez cr√©er manuellement cette table dans l'interface SQL de Supabase.")
        print("Utilisez le script SQL dans backend/scripts/create_tables.sql")
        return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de la table 'messages': {str(e)}")
        return False

async def insert_agents():
    """Ins√®re les agents par d√©faut dans la base de donn√©es"""
    try:
        print("\nInsertion des agents par d√©faut...")
        
        # V√©rifier si les agents existent d√©j√†
        existing_agents = await supabase_service.get_all_agents()
        existing_ids = [agent['id'] for agent in existing_agents or []]
        
        inserted_count = 0
        skipped_count = 0
        
        # Ins√©rer uniquement les agents qui n'existent pas encore
        for agent in DEFAULT_AGENTS:
            if agent['id'] not in existing_ids:
                print(f"Insertion de l'agent: {agent['name']} ({agent['id']})")
                result = await supabase_service.create_agent(agent)
                if result:
                    inserted_count += 1
                    print(f"‚úÖ Agent '{agent['name']}' ins√©r√© avec succ√®s.")
                else:
                    print(f"‚ùå √âchec de l'insertion de l'agent '{agent['name']}'.")
            else:
                skipped_count += 1
                print(f"‚è© L'agent {agent['name']} ({agent['id']}) existe d√©j√†.")
        
        print(f"\nR√©sum√©: {inserted_count} agents ins√©r√©s, {skipped_count} agents d√©j√† existants.")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'insertion des agents: {str(e)}")
        return False

async def main():
    """Fonction principale"""
    print("=== Initialisation des tables et agents Supabase ===\n")
    
    # V√©rifier/cr√©er les tables
    agents_ok = await create_agent_table()
    conversations_ok = await create_conversation_table()
    messages_ok = await create_message_table()
    
    if not agents_ok:
        print("\n‚ùå La configuration de la table 'agents' a √©chou√©.")
        return False
    
    # Si les tables agents existent, ins√©rer les agents
    if agents_ok:
        agents_inserted = await insert_agents()
        if not agents_inserted:
            print("\n‚ùå L'insertion des agents a √©chou√©.")
    
    # R√©sum√©
    print("\n=== R√©sum√© de l'initialisation ===")
    print(f"Table 'agents': {'‚úÖ OK' if agents_ok else '‚ùå NON'}")
    print(f"Table 'conversations': {'‚úÖ OK' if conversations_ok else '‚ùå NON'}")
    print(f"Table 'messages': {'‚úÖ OK' if messages_ok else '‚ùå NON'}")
    
    if not conversations_ok or not messages_ok:
        print("\n‚ö†Ô∏è ATTENTION: Certaines tables n'existent pas dans Supabase.")
        print("Vous devez les cr√©er manuellement en utilisant le script SQL dans backend/scripts/create_tables.sql")
        print("Ex√©cutez ce script SQL dans l'interface de Supabase.")
    
    return agents_ok

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 