#!/usr/bin/env python3
"""
D√©monstration du service de recherche flexible
Montre diff√©rents use cases et configurations
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.flexible_search_service import (
    FlexibleSearchService, 
    SearchConfig, 
    SearchProvider, 
    Freshness, 
    SafeSearch,
    VideoScriptGenerator,
    QuickSearch,
    TrendAnalyzer
)

def demo_basic_search():
    """D√©mo de recherche de base"""
    print("üîç RECHERCHE DE BASE")
    print("=" * 40)
    
    # Configuration simple
    service = FlexibleSearchService()
    results = service.search("N8N automation tutorial")
    
    if results.get("success"):
        print(f"‚úÖ Trouv√© {results['total_results']} r√©sultats")
        for i, result in enumerate(results['results'][:3], 1):
            print(f"{i}. {result['title']}")
            print(f"   URL: {result['url']}")
            print(f"   Mots-cl√©s: {result['keywords']}")
            print()
    else:
        print(f"‚ùå Erreur: {results.get('error')}")

def demo_custom_config():
    """D√©mo avec configuration personnalis√©e"""
    print("‚öôÔ∏è RECHERCHE AVEC CONFIG PERSONNALIS√âE")
    print("=" * 40)
    
    # Configuration avanc√©e
    custom_config = SearchConfig(
        provider=SearchProvider.BRAVE,
        country="US",
        language="en",
        n_results=5,
        freshness=Freshness.PAST_WEEK,
        safesearch=SafeSearch.MODERATE,
        save_file=True
    )
    
    service = FlexibleSearchService(custom_config)
    results = service.search("Make.com vs Zapier 2024")
    
    if results.get("success"):
        print(f"‚úÖ Config: {results['config_used']['country']}, {results['config_used']['language']}")
        print(f"‚úÖ R√©sultats: {results['total_results']}")
        print(f"‚úÖ Fichier sauvegard√©: {results['config_used']['save_file']}")
    else:
        print(f"‚ùå Erreur: {results.get('error')}")

def demo_quick_search():
    """D√©mo de recherche rapide"""
    print("‚ö° RECHERCHE RAPIDE")
    print("=" * 40)
    
    # Interface simplifi√©e
    results = QuickSearch.search("Python automation", n_results=3)
    
    print(f"‚úÖ {len(results)} r√©sultats trouv√©s rapidement")
    for result in results:
        print(f"- {result['title']}")

def demo_trend_analysis():
    """D√©mo d'analyse de tendances"""
    print("üìà ANALYSE DE TENDANCES")
    print("=" * 40)
    
    service = FlexibleSearchService()
    analyzer = TrendAnalyzer(service)
    
    trends = analyzer.analyze_trends("IA")
    
    print(f"‚úÖ {trends['trends_found']} tendances analys√©es pour: {trends['topic']}")
    print("Top 3 tendances:")
    for i, trend in enumerate(trends['latest_trends'][:3], 1):
        print(f"{i}. {trend['title']}")

def demo_script_generation():
    """D√©mo de g√©n√©ration de script"""
    print("üé¨ G√âN√âRATION DE SCRIPT VID√âO")
    print("=" * 40)
    
    # Service de recherche
    search_service = FlexibleSearchService()
    
    # G√©n√©rateur de script
    script_gen = VideoScriptGenerator(search_service)
    
    # G√©n√©rer script style Orra Academy
    script_data = script_gen.generate_script(
        topic="MAKE pour les d√©butants",
        target_audience="d√©butants",
        style="orra_academy",
        include_research=True
    )
    
    print(f"‚úÖ Script g√©n√©r√© pour: {script_data['topic']}")
    print(f"‚úÖ Audience: {script_data['target_audience']}")
    print(f"‚úÖ Style: {script_data['style']}")
    print("\nüìù APER√áU DU SCRIPT:")
    print(script_data['script'][:500] + "...")

def demo_multiple_configs():
    """D√©mo avec diff√©rentes configurations pour diff√©rents besoins"""
    print("üéØ CONFIGS MULTIPLES POUR DIFF√âRENTS BESOINS")
    print("=" * 50)
    
    # Config pour recherche d'actualit√©s
    news_config = SearchConfig(
        freshness=Freshness.PAST_DAY,
        result_filter="news",
        n_results=5
    )
    
    # Config pour recherche de tutoriels
    tutorial_config = SearchConfig(
        freshness=Freshness.PAST_MONTH,
        result_filter="web",
        n_results=10
    )
    
    # Config pour recherche acad√©mique
    academic_config = SearchConfig(
        freshness=Freshness.PAST_YEAR,
        result_filter="web",
        n_results=15,
        save_file=True
    )
    
    service = FlexibleSearchService()
    
    print("üì∞ Actualit√©s (derni√®res 24h):")
    news_results = service.search("IA intelligence artificielle", news_config)
    if news_results.get("success"):
        print(f"   {news_results['total_results']} actualit√©s trouv√©es")
    
    print("\nüìö Tutoriels (dernier mois):")
    tutorial_results = service.search("Python automation tutorial", tutorial_config)
    if tutorial_results.get("success"):
        print(f"   {tutorial_results['total_results']} tutoriels trouv√©s")
    
    print("\nüéì Recherche acad√©mique (derni√®re ann√©e):")
    academic_results = service.search("machine learning research", academic_config)
    if academic_results.get("success"):
        print(f"   {academic_results['total_results']} articles trouv√©s")
        print(f"   R√©sultats sauvegard√©s: {academic_results['config_used']['save_file']}")

def show_use_cases():
    """Montre diff√©rents cas d'usage"""
    print("üéØ CAS D'USAGE DU SERVICE FLEXIBLE")
    print("=" * 50)
    
    use_cases = [
        {
            "name": "Recherche rapide",
            "description": "Pour des recherches simples et rapides",
            "example": "QuickSearch.search('N8N tutorial')"
        },
        {
            "name": "Analyse de tendances",
            "description": "Pour analyser les tendances d'un domaine",
            "example": "TrendAnalyzer(service).analyze_trends('IA')"
        },
        {
            "name": "G√©n√©ration de contenu",
            "description": "Pour cr√©er des scripts vid√©o personnalis√©s",
            "example": "VideoScriptGenerator(service).generate_script('Make.com')"
        },
        {
            "name": "Recherche par pays",
            "description": "Pour cibler des r√©sultats g√©ographiques",
            "example": "SearchConfig(country='US', language='en')"
        },
        {
            "name": "Filtrage temporel",
            "description": "Pour des r√©sultats r√©cents ou historiques",
            "example": "SearchConfig(freshness=Freshness.PAST_WEEK)"
        },
        {
            "name": "Sauvegarde automatique",
            "description": "Pour archiver les r√©sultats importants",
            "example": "SearchConfig(save_file=True)"
        }
    ]
    
    for i, use_case in enumerate(use_cases, 1):
        print(f"{i}. **{use_case['name']}**")
        print(f"   {use_case['description']}")
        print(f"   Exemple: {use_case['example']}")
        print()

if __name__ == "__main__":
    print("üöÄ D√âMONSTRATION SERVICE DE RECHERCHE FLEXIBLE")
    print("=" * 60)
    print("Inspir√© de l'approche CrewAI BraveSearchTool")
    print("=" * 60)
    
    # Montrer les cas d'usage
    show_use_cases()
    
    print("\n" + "üß™ TESTS EN DIRECT")
    print("=" * 60)
    
    try:
        # D√©mo recherche de base
        demo_basic_search()
        print()
        
        # D√©mo recherche rapide
        demo_quick_search()
        print()
        
        # D√©mo configs multiples
        demo_multiple_configs()
        print()
        
        # D√©mo g√©n√©ration de script
        demo_script_generation()
        print()
        
        print("\n‚ú® AVANTAGES DE LA FLEXIBILIT√â:")
        print("=" * 60)
        print("‚úÖ Configuration par d√©faut simple")
        print("‚úÖ Override facile avec des configs personnalis√©es")
        print("‚úÖ Interfaces sp√©cialis√©es (QuickSearch, TrendAnalyzer)")
        print("‚úÖ Support multi-provider (extensible)")
        print("‚úÖ Sauvegarde optionnelle")
        print("‚úÖ Formats de sortie configurables")
        print("‚úÖ Int√©gration facile avec d'autres services")
        
    except Exception as e:
        print(f"‚ùå Erreur pendant la d√©mo: {e}")
        print("üí° Tip: V√©rifiez que BRAVE_API_KEY est configur√©e") 